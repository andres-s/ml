import unittest as ut

import numpy as np

from collab_filter import calc_cost
from collab_filter import calc_X_grad
from collab_filter import calc_Theta_grad


class NumpyCustomAssertions:

    def assertArrayEqual(self, x, y, err_msg='', verbose=True):
        np.testing.assert_array_equal(x, y, err_msg, verbose)

    def assertAllClose(self, actual, desired, rtol=1e-07, atol=0, err_msg='', verbose=True):
        np.testing.assert_allclose(actual, desired, rtol, atol, err_msg, verbose)


class CollabFilterTestCase(ut.TestCase, NumpyCustomAssertions):

    _Theta = np.array([
        [ 8.79334650e+00, -7.23994430e+00, -1.35549819e+01, -5.82442782e+00, 1.05717784e+00],
        [-4.19771822e+00, 1.16310293e+01, 1.01872700e+01, -1.32695216e+00, -3.32208418e+00],
        [-3.43695928e+00, 1.12278207e+00, -1.54165344e+01, -8.11104303e-01, 3.44922641e+00],
        [-4.79375477e-01, 5.84777126e+00, 4.35999668e+00, 5.14714838e-01, 7.72533906e-01],
        [-2.17079431e+00, -9.45249434e+00, -5.06275675e+00, 7.19488122e+00, 3.82063624e+00],
        [-1.07413021e+01, -1.38305516e+01, 1.08370979e+01, 1.66475359e+01, 1.92900322e+01],
        [-1.86671561e+00, 7.32640294e+00, 2.62238844e+00, 8.79467382e+00, -9.93275163e-03],
        [ 2.09249321e+01, -7.26874592e+00, -4.21576682e+00, -4.09365357e+00, 1.97189066e+00]
    ])

    _X = np.array([
        [  1.15143819, 0.78612035, -0.88299143, -7.30898121, 17.97439876],
        [ -2.8955543, -4.58909821, 4.87252156, -5.49972786, -14.55229784],
        [  4.25830915, -0.99982161, 3.60740322, -7.6912744, -3.44339315],
        [-13.97771256, -19.88715155, -12.9883925 , 3.42737048, 2.05095143],
        [-10.98368275, 0.73490144, -0.69533587, 10.7172751 , -10.9660205 ],
        [ -1.00719503, 0.17356843, 14.25056545, 2.27704402, 8.11322135],
        [  7.90617929, -23.69579839, -3.31038086, -9.49955348, -11.50521093],
        [ -4.84637096, -16.40157961, 19.24134698, -0.78619802, -1.80498475],
        [ 24.3173574, 10.99203849, 4.08661107, 7.46835334, -12.48076954],
        [  5.98494342, -7.47877364, 5.19422365, 13.47043831, 12.41397565],
        [ -2.01310088, -11.88071074, 4.1093142 , -2.42788503, -6.43229145],
        [  2.84539727, -5.47726458, 0.22440483, 4.76538302, -8.75997872],
    ])

    _regulariser_coeff = 0.5

    _R = np.array([
        [1, 0, 0, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0],
        [1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 1, 0, 1, 0, 0],
        [0, 0, 1, 1, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 1, 0, 1],
        [1, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 1, 1],
    ])

    _Y = np.array([
        [ -4.79005206, -14.18351268, -11.94743713, -4.57919484, -1.15544805, 4.61514657, -12.8127193 , -0.86443101],
        [-10.50096143, -2.23468557, 0.9567825 , -15.65828386, -4.39895135, -5.71374648, -16.58070156, 12.09737288],
        [  0.23910903, -4.50118417, 7.88424892, 9.82150579, 11.60678502, -2.51466517, -3.48426366, 10.61355522],
        [  3.05617096, 1.39707947, -5.85376593, 4.55296501, 1.36234027, -13.67395051, -0.61686752, -7.67217246],
        [-11.77139576, 9.01177232, 21.80657482, 2.50784632, 3.52874833, -10.65777738, 6.33134913, -10.32114633],
        [  5.94681119, 5.11765631, 8.11566352, -0.83773968, 0.40707953, 1.04105639, -17.0704443 , 8.23719415],
        [ -3.74583105, 1.77800797, 9.78955514, 0.59588373, -4.80071376, 1.78908869, 2.56104731, -3.06953296],
        [ 12.31374434, -23.0107572 , 14.2310991 , -10.20154952, 8.1600282 , 11.10579083, 0.3784387 , -8.11515266],
        [ 15.67360438, -14.24058839, 4.51383385, 4.72652244, 6.60883891, -8.988124  , -20.33906902, -1.94872212],
        [  9.18212138, -8.76508348, 2.7773172 , 1.71449748, -9.31754152, -1.35595771, 6.02591513, 9.35272778],
        [ -6.1868695 , -5.58921327, -13.35218079, -7.98565189, 9.67608097, -12.97766385, -7.83749718, 8.4306345 ],
        [ -7.96088069, -1.66256439, -1.05163005, 16.04350546, -0.6168705 , 2.39011386, -12.55912165, -0.73605843],
    ])

    _unregularised_cost = 346141.6731
    _regularised_cost = 348220.7565

    _X_unreg_grad = np.array([
        [814.6337774, -880.9895526, -1188.966709, -917.2165742, 99.50713555],
        [0, 0, 0, 0, 0],
        [2115.194359, 2043.038703, -2185.74446, -3690.999526, -3563.47026],
        [1630.334767, -2255.32769, -3119.43372, -1112.896538, 57.01284436],
        [0, 0, 0, 0, 0],
        [-633.0580729, 1921.10154, 1388.410422, 527.5584336, -387.2251251],
        [1961.143563, 1418.596305, -2642.126725, -3000.4334, -3506.843163],
        [1221.118982, -862.5696152, 4721.941842, -340.0233084, -1097.9132],
        [12142.85397, 5299.433349, -5520.636777, -9548.169341, -8858.467707],
        [12.41105243, -558.4991141, -441.5512785, 895.0257268, 322.9867071],
        [167.5614599, -503.3556895, 957.9640777, 379.8004658, -95.66427093],
        [1187.155979, -816.0150738, -469.8086122, 160.2749806, 298.222724],
    ])

    _X_reg_grad = np.array([
        [815.2094965, -880.5964924, -1189.408205, -920.8710649, 108.4943349],
        [-1.447777149, -2.294549103, 2.436260778, -2.749863928, -7.276148921],
        [2117.323513, 2042.538793, -2183.940759, -3694.845163, -3565.191956],
        [1623.345911, -2265.271266, -3125.927916, -1111.182853, 58.03832007],
        [-5.491841375, 0.3674507186, -0.3476679371, 5.35863755, -5.483010252],
        [-633.5616704, 1921.188325, 1395.535704, 528.6969556, -383.1685145],
        [1965.096653, 1406.748406, -2643.781916, -3005.183177, -3512.595769],
        [1218.695796, -870.770405, 4731.562516, -340.4164074, -1098.815692],
        [12155.01265, 5304.929368, -5518.593471, -9544.435164, -8864.708092],
        [15.40352414, -562.2385009, -438.9541667, 901.760946, 329.193695],
        [166.5549095, -509.2960448, 960.0187348, 378.5865233, -98.88041665],
        [1188.578678, -818.7537061, -469.6964097, 162.6576721, 293.8427347],
    ])

    _Theta_unreg_grad = np.array([
        [-2596.989481, -3155.288961, -2560.80833, -514.656536, 1375.601139],
        [1979.831687, 2083.691699, 1551.345291, -365.3338806, -1828.835328],
        [1696.45463, 6129.691714, -6437.766324, 436.2437141, 1067.319775],
        [1010.442474, 7418.507635, 2703.181186, 944.2731797, 1896.01923],
        [41.71638559, -775.8918731, 191.7173734, 111.5231352, -686.0165179],
        [-13754.10632, -906.2446768, -2034.171317, -474.7876898, 8594.491355],
        [281.9080315, 656.3356612, -96.31880984, 1990.037824, 747.0140448],
        [8894.671746, 3598.832371, 1478.952958, 2974.412289, -5020.358823],
    ])

    _Theta_reg_grad = np.array([
        [-2592.592807, -3158.908934, -2567.585821, -517.5687499, 1376.129728],
        [1977.732828, 2089.507213, 1556.438926, -365.9973567, -1830.49637],
        [1694.736151, 6130.253105, -6445.474591, 435.838162, 1069.044388],
        [1010.202787, 7421.431521, 2705.361185, 944.5305372, 1896.405497],
        [40.63098844, -780.6181203, 189.185995, 115.1205758, -684.1061998],
        [-13759.47697, -913.1599526, -2028.752768, -466.4639219, 8604.136371],
        [280.9746737, 659.9988627, -95.00761562, 1994.435161, 747.0090784],
        [8905.134212, 3595.197998, 1476.845075, 2972.365463, -5019.372877],
    ])

    def setUp(self):
        pass


    def test_calc_cost(self):
        unregularised_cost = calc_cost(self._Y, self._R, self._X, self._Theta,
                                       0.)
        self.assertAllClose(unregularised_cost, self._unregularised_cost)

        regularised_cost = calc_cost(self._Y, self._R, self._X, self._Theta,
                                     self._regulariser_coeff)
        self.assertAllClose(regularised_cost, self._regularised_cost)


    def test_calc_X_grad(self):
        unregularised_grad = calc_X_grad(self._Y, self._R, self._X,
                                         self._Theta, 0.)
        self.assertAllClose(unregularised_grad, self._X_unreg_grad)

        regularised_grad = calc_X_grad(self._Y, self._R, self._X, self._Theta,
                                       self._regulariser_coeff)
        self.assertAllClose(regularised_grad, self._X_reg_grad)


    def test_calc_Theta_grad(self):
        unregularised_grad = calc_Theta_grad(self._Y, self._R, self._X,
                                         self._Theta, 0.)
        self.assertAllClose(unregularised_grad, self._Theta_unreg_grad)

        regularised_grad = calc_Theta_grad(self._Y, self._R, self._X, self._Theta,
                                       self._regulariser_coeff)
        self.assertAllClose(regularised_grad, self._Theta_reg_grad)



    def tearDown(self):
        pass


suite = ut.TestLoader().loadTestsFromTestCase(CollabFilterTestCase)


if __name__ == '__main__':
    ut.TextTestRunner(verbosity=2).run(suite)

